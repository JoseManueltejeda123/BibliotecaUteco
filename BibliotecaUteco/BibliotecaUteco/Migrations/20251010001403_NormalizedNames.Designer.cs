// <auto-generated />
using System;
using BibliotecaUteco.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BibliotecaUteco.Migrations
{
    [DbContext(typeof(BibliotecaUtecoDbContext))]
    [Migration("20251010001403_NormalizedNames")]
    partial class NormalizedNames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedFullName")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("AuthorId", "BookId")
                        .IsUnique();

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.BookLoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LoanId", "BookId")
                        .IsUnique();

                    b.ToTable("BookLoans");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(3740),
                            Name = "Fantasía",
                            NormalizedName = "fantasia",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(3745)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4905),
                            Name = "Terror",
                            NormalizedName = "terror",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4906)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4909),
                            Name = "Ciencia Ficción",
                            NormalizedName = "ciencia ficcion",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4910)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4911),
                            Name = "Romance",
                            NormalizedName = "romance",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4913)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4914),
                            Name = "Misterio",
                            NormalizedName = "misterio",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4915)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4917),
                            Name = "Aventura",
                            NormalizedName = "aventura",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4917)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4919),
                            Name = "Histórico",
                            NormalizedName = "historico",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4920)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4921),
                            Name = "Biografía",
                            NormalizedName = "biografia",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4922)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4924),
                            Name = "Poesía",
                            NormalizedName = "poesia",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4924)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4926),
                            Name = "Drama",
                            NormalizedName = "drama",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 396, DateTimeKind.Utc).AddTicks(4927)
                        });
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.GenreBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId", "BookId")
                        .IsUnique();

                    b.ToTable("GenreBooks");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxLoanDays")
                        .HasColumnType("int");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReaderId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Penalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DailyFineRate")
                        .HasColumnType("float");

                    b.Property<double>("GivenAmount")
                        .HasColumnType("float");

                    b.Property<bool>("IsDue")
                        .HasColumnType("bit");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<int>("OverdueDays")
                        .HasColumnType("int");

                    b.Property<double>("ReturnedAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LoanId")
                        .IsUnique();

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StudentLicence")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdentityCardNumber")
                        .IsUnique();

                    b.HasIndex("StudentLicence")
                        .IsUnique()
                        .HasFilter("[StudentLicence] IS NOT NULL");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 328, DateTimeKind.Utc).AddTicks(4870),
                            Name = "Librarian",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 328, DateTimeKind.Utc).AddTicks(4874)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 328, DateTimeKind.Utc).AddTicks(6802),
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 328, DateTimeKind.Utc).AddTicks(6804)
                        });
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityCardNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityCardNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 341, DateTimeKind.Utc).AddTicks(1268),
                            FullName = "Juan Pérez",
                            IdentityCardNumber = "00112345678",
                            Password = "020255afeda8c28778f9a3c46197d25f0521b40aae838b9e23a96a5bed3773c2",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 341, DateTimeKind.Utc).AddTicks(1272),
                            Username = "juan.perez"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 378, DateTimeKind.Utc).AddTicks(517),
                            FullName = "Jose Pérez",
                            IdentityCardNumber = "00212345678",
                            Password = "b60037fbbcfdd8f052dc80c8002c92686300ab72932a341954db68d7851ec2f8",
                            RoleId = 2,
                            UpdatedAt = new DateTime(2025, 10, 10, 0, 14, 1, 378, DateTimeKind.Utc).AddTicks(526),
                            Username = "jose.perez"
                        });
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.BookAuthor", b =>
                {
                    b.HasOne("BibliotecaUteco.DataAccess.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaUteco.DataAccess.Models.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.BookLoan", b =>
                {
                    b.HasOne("BibliotecaUteco.DataAccess.Models.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaUteco.DataAccess.Models.Loan", "Loan")
                        .WithMany("Books")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.GenreBook", b =>
                {
                    b.HasOne("BibliotecaUteco.DataAccess.Models.Book", "Book")
                        .WithMany("Genres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaUteco.DataAccess.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Loan", b =>
                {
                    b.HasOne("BibliotecaUteco.DataAccess.Models.Reader", "Reader")
                        .WithMany("Loans")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Penalty", b =>
                {
                    b.HasOne("BibliotecaUteco.DataAccess.Models.Loan", "Loan")
                        .WithOne("Penalty")
                        .HasForeignKey("BibliotecaUteco.DataAccess.Models.Penalty", "LoanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BibliotecaUteco.DataAccess.Models.Transaction", "Transaction")
                        .WithOne("Penalty")
                        .HasForeignKey("BibliotecaUteco.DataAccess.Models.Penalty", "TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Loan");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Transaction", b =>
                {
                    b.HasOne("BibliotecaUteco.DataAccess.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.User", b =>
                {
                    b.HasOne("BibliotecaUteco.DataAccess.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Book", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Genres");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Loan", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Penalty");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Reader", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.Transaction", b =>
                {
                    b.Navigation("Penalty");
                });

            modelBuilder.Entity("BibliotecaUteco.DataAccess.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
