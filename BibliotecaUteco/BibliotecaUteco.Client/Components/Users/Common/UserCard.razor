<div class="flex items-center gap-3 justify-between text-neutral-800 w-full  p-2 bg-neutral-100/70 hover:bg-neutral-100 rounded-lg">
    <div class="flex w-full items-center gap-2">
        @if (string.IsNullOrEmpty(User.ProfilePictureUrl))
        {
        <img class="w-[30px] h-[30px] rounded-full object-cover" src=@($"https://avatar.iran.liara.run/public/{User.SexName}?username={User.Username}")/>

        }
        else
        {
            <img class="w-[30px] h-[30px] rounded-full object-cover" src="@User.ProfilePictureUrl"/>
        }
        <div class="flex flex-col">
            <p class="text-sm line-clamp-1">@User.FullName</p>
            <p class="text-xs">@(User.Username + " ")(@User._roleName)</p>

        </div>
    </div>
   
    <LumexDropdown ShowArrow="true"  Id=@($"UserActions-{User.Username}")>
        <LumexDropdownTrigger >
            <button>
                <EllipsisVerticalIcon Size="18px" class=" cursor-pointer text-neutral-800"/>
            </button>
            
        </LumexDropdownTrigger>
        <LumexDropdownMenu>
            <LumexDropdownItem OnClick="SetUpdateUserView"  Id="ActualizarUsuario">
                <StartContent>
                    <SquarePenIcon Size="18px"/>
                </StartContent>
                <ChildContent>Actualizar usuario</ChildContent>
            </LumexDropdownItem>

        </LumexDropdownMenu>
    </LumexDropdown>
</div>

@code{

    public bool IsOpen {get; set;}
    
    
    [Parameter] public UserResponse User { get; set; } = new();
    
    

}



@functions{
    public async Task HideDropdown()
    {
        await Task.Delay(20);
        await JsRuntime.InvokeVoidAsync("removeDropdownOverlay", $"UserActions-{User.Username}");
    }
    public async Task SetUpdateUserView()
    {
        RightBarContext.SetUserToUpdate(User);
        RightBarContext.SetView(RightBarView.UpdateUser);
        await HideDropdown();                            
    }
   

}