@using BibliotecaUteco.Client.Utilities

<Animate Animation="Animations.FadeIn" Delay="@TimeSpan.FromMilliseconds(Index * 300)" >
    
</Animate>
<AuthorizeView>
    <Authorized>
        <LumexDropdown ShowArrow="true" Id=@($"GenreActions-{Genre.Name}")>
            <LumexDropdownTrigger>
                <button>
                    <LumexChip Disabled="_deletingGenre" Class="cursor-pointer"  Size="Size.Small" Variant="ChipVariant.Flat" Color="@Color">
                        <ChildContent>
                            <p class="text-sm font-semibold line-clamp-1 text-ellipsis overflow-hidden">@Genre.Name</p>

                        </ChildContent>

                    </LumexChip>
                </button>
            </LumexDropdownTrigger>
            <LumexDropdownMenu>
                <LumexDropdownItem OnClick="TriggerOnClicked" Id="Select">
                    <StartContent>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mouse-pointer-click-icon lucide-mouse-pointer-click"><path d="M14 4.1 12 6"/><path d="m5.1 8-2.9-.8"/><path d="m6 12-1.9 2"/><path d="M7.2 2.2 8 5.1"/><path d="M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z"/></svg>                    </StartContent>
                    <ChildContent>
                        <p class="text-[13px] font-normal">Seleccionar género</p>
                    </ChildContent> 
                </LumexDropdownItem>
                <LumexDropdownItem Disabled='@(!context.User.IsInRole("Admin"))' OnClick="TriggerOnUpdateGenreClicked" Id="Edit">
                    <StartContent>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil-ruler-icon lucide-pencil-ruler"><path d="M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13"/><path d="m8 6 2-2"/><path d="m18 16 2-2"/><path d="m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17"/><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"/><path d="m15 5 4 4"/></svg>
                    </StartContent>
                    <ChildContent>
                        <p class="text-[13px] font-normal">Editar género</p>
                    </ChildContent> 
                </LumexDropdownItem>
                <LumexDropdownItem Disabled='@(!context.User.IsInRole("Admin"))' OnClick="SetDeleteGenreConfirmationModal" Id="Delete" Color="@ThemeColor.Danger" Class="text-danger">
                     <StartContent>
                         <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash2-icon lucide-trash-2"><path d="M10 11v6"/><path d="M14 11v6"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M3 6h18"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>                    </StartContent>
                    <ChildContent>
                        <p class="text-[13px] font-normal">Eliminar género</p>
                    </ChildContent> 
                </LumexDropdownItem>
            </LumexDropdownMenu>
        </LumexDropdown>



    </Authorized>
</AuthorizeView>

   







@code{

   
    public bool _deletingGenre {get; set;} = false;
    [Parameter] public GenreResponse Genre { get; set; } = new();
    [Parameter] public EventCallback<GenreResponse> OnClicked {get; set;}
    public ThemeColor Color { get; set; } = ThemeColor.Default;

    [Parameter] public EventCallback<GenreResponse> OnUpdateGenreClicked {get; set;}

    [Parameter] public EventCallback<GenreResponse> OnGenreDeleted {get; set;}

    [Parameter] public bool ShowActions {get; set;} = true;
    
    [Parameter] public int Index {get; set;} = 0;

}

@functions{
    public async Task SetDeleteGenreConfirmationModal()
    {
        if(_deletingGenre) return;

        await HideDropdown();
        
        var confirmed = await DialogService.ShowAsync(
            title: "Eliminar Género",
            body: $"¿Desea eliminar el género {Genre.Name}? Una vez eliminado no se podrá recuperar.",
            acceptText: "Sí, eliminar género",
            cancelText: "Cancelar"
            
        );

        if (confirmed)
        {
            await FetchDeleteGenreAsync();
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Color = RandomColorHelper.GetRandomColor();
            StateHasChanged();
        }
    }

    public async Task HideDropdown()
    {
        await Task.Delay(20);
        await JsRuntime.InvokeVoidAsync("removeDropdownOverlay", $"GenreActions-{Genre.Name}");
    }

    public async Task FetchDeleteGenreAsync()
    {
        if(Genre.Id <= 0) return;

        _deletingGenre = true;
        StateHasChanged();
        var result = await GenresApiServices.DeleteAsync(new(){GenreId = Genre.Id});

        if(result.IsSuccessful())
        {
            Toast.Show("Género eliminado exitosamente.");
            await OnGenreDeleted.InvokeAsync(Genre);
            await HideDropdown();
        }
        
        _deletingGenre = false;
        StateHasChanged();
    }

    public async Task TriggerOnClicked()
    {
        await OnClicked.InvokeAsync(Genre);
        await HideDropdown();
    }

     public async Task TriggerOnUpdateGenreClicked()
     {
        await OnUpdateGenreClicked.InvokeAsync(Genre);
        await HideDropdown();
     }
}