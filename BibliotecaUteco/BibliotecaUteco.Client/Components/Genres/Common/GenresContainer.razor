
<div class="flex flex-col p-2 gap-2 w-[300px] max-h-[400px] overflow-y-auto ">
    
    @if (ShowCreateGenreModal)
    {

        <AuthorizeView Roles="Admin">
            <Authorized>
                <div class="w-full flex items-center justify-between mb-4">
                    <label class="text-lg font-semibold">Crear Género</label>
                    <IconButton Small="true" OnClick="() => { ShowCreateGenreModal = false; }" TooltipText="Cancelar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x-icon lucide-x"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
                    </IconButton>
                </div>
                <CreateGenreForm OnGenreCreated="HandleOnGenreCreated"/>
            </Authorized>
        </AuthorizeView>
        
        
        
    }
    else if(ShowUpdateGenreModal && GenreToUpdate is not null)
    {
         <AuthorizeView Roles="Admin">
            <Authorized>
                <div class="w-full flex items-center justify-between mb-4">
                    <label class="text-lg font-semibold">Actualizar Género</label>
                    <IconButton Small="true" OnClick="()=>{ShowUpdateGenreModal = false; GenreToUpdate = null;}" TooltipText="Cancelar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x-icon lucide-x"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
                    </IconButton>
                </div>
                <UpdateGenreForm Genre="GenreToUpdate" OnGenreUpdated="HandleOnGenreUpdated"/>
            </Authorized>
        </AuthorizeView>
    }
    else
    {
        <div class="w-full gap-3 flex flex-col ">
            <label class="text-[15px] font-semibold ">Administrar géneros</label>
            <EditForm class="w-full flex items-end gap-2" Model="@GetGenresByName" OnValidSubmit="FetchGetGenresByNameAsync">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <LumexTextbox Type="@InputType.Search"
                              Label="Buscar género"
                              @bind-Value="@GetGenresByName.GenreName"
                              Placeholder="Ej. Fantasia"
                              LabelPlacement="@LabelPlacement.Outside"
                              Disabled="@_fetchingGenres"
                              Clearable="@true"
                              Size="Size.Small"
                              Behavior="InputBehavior.OnInput"
                              OnCleared="async () => { await FetchGetGenresByNameAsync(); }"/>
                <LumexButton Type="ButtonType.Submit" Size="Size.Small" Disabled="@_fetchingGenres" Color="ThemeColor.Primary">
                    Buscar
                </LumexButton>

            </EditForm>

        </div>
    <SidebarSectionDivider Name="Géneros"/>

    
           
   

     <div class="w-full  flex flex-wrap gap-2 mt-3 items-center">
        
         @if(_fetchingGenres){

             <GenreSkeleton Count="10"/>
         }
         else
         {
             <AuthorizeView Roles="Admin">
                 <Authorized>
                     <div @onclick="() => {ShowCreateGenreModal = true; }">
                         <LumexChip Class="border-dashed cursor-pointer !py-1 transition-all hover:bg-green-50 " Variant="ChipVariant.Outlined" Color="ThemeColor.Primary">
                             Crear Género
                         </LumexChip>
                     </div>
                 </Authorized>
            </AuthorizeView>
          
         
             if(Genres.Any())
             {
                 foreach(var genre in Genres)
                 {   
                    <GenreCard Index="@(Genres.IndexOf(genre))" OnGenreDeleted="HandleGenreDeleted" OnUpdateGenreClicked="HandleOnUpdateGenreClicked" OnClicked="HandleGenreClicked" Genre="genre"/>
    
                 }
             }
             else
             {   
                 <NoResultsFound></NoResultsFound>
             }

       
         }
     </div>
   
    }
    
    

</div>


@code{

    //flags

    public bool _fetchingGenres {get; set;} = true;

    //props
    public List<GenreResponse> Genres {get; set;} = new();
    public GetGenresByNameRequest GetGenresByName {get; set;} = new();

    [Parameter] public EventCallback<GenreResponse> OnGenreClicked {get; set;}
    public bool ShowCreateGenreModal { get; set; } = false;
    public bool ShowUpdateGenreModal { get; set; } = false;

    public GenreResponse? GenreToUpdate {get; set;} = null;

}

@functions{

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await FetchGetGenresByNameAsync();

        }

    }

    public void HandleOnUpdateGenreClicked(GenreResponse genre)
    {
        ShowUpdateGenreModal = true;
        GenreToUpdate = genre;
    }

    public async Task HandleGenreClicked(GenreResponse genre){
         await OnGenreClicked.InvokeAsync(genre);
    }

    public void HandleOnGenreCreated(GenreResponse genre)
    {
        ShowCreateGenreModal = false;
        Genres.Insert(0, genre);
    }

     public void HandleOnGenreUpdated(GenreResponse genre)
    {
        ShowUpdateGenreModal = false;
        GenreToUpdate = null;

        var genreToUpdate = Genres.FirstOrDefault(g => g.Id == genre.Id);

        if(genreToUpdate is null) return;

        var index = Genres.IndexOf(genreToUpdate);

        if(index < 0) return;

        Genres[index] = genre;
    }

    public void HandleGenreDeleted(GenreResponse genre)
    {
        var genreToDelete = Genres.FirstOrDefault(g => g.Id == genre.Id);

        if(genreToDelete is null) return;

        Genres.Remove(genreToDelete);
        StateHasChanged();
    }
    public async Task FetchGetGenresByNameAsync(){

        _fetchingGenres = true;
        StateHasChanged();

        var result = await GenresApiServices.GetByNameAsync(GetGenresByName);

        if(result.IsSuccessful())
        {
            Genres = result.Data;
        }

        _fetchingGenres = false;
        StateHasChanged();
    }
}