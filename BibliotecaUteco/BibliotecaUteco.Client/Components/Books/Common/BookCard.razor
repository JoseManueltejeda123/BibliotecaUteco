

<Animate Animation="Animations.FadeIn" Delay="TimeSpan.FromMilliseconds(Index * 300)" >
    <LumexCard Class="w-full aspect-[2/3] group hover:scale-105 transition-all cursor-pointer group">
       <AuthorizeView>
           <Authorized>
                <LumexDropdown ShowArrow="true"  >
                <LumexDropdownTrigger>
                    <LumexButton Size="Size.Small" IconOnly="true" Radius="Radius.Full" Class="absolute right-[10px] top-[10px] bg-green-700/50 backdrop-blur-xl invisible group-hover:visible text-white !p-1">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="!size-[16px] lucide lucide-ellipsis-icon lucide-ellipsis"><circle cx="12" cy="12" r="1"/><circle cx="19" cy="12" r="1"/><circle cx="5" cy="12" r="1"/></svg>
                    </LumexButton>
                </LumexDropdownTrigger>
                <LumexDropdownMenu  >

               

                    <LumexDropdownItem OnClick="SetBookToUpdate" Id="EditarLibro" >
                        <StartContent>
                            <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="!size-[18px] lucide lucide-book-image-icon lucide-book-image"><path d="m20 13.7-2.1-2.1a2 2 0 0 0-2.8 0L9.7 17"/><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"/><circle cx="10" cy="8" r="2"/></svg>
                        </StartContent>
                        <ChildContent>Editar Libro</ChildContent>
                    </LumexDropdownItem>
                    
                <LumexDropdownItem OnClick="SetBookDetails"  Id="VerDetalles">
                    <StartContent>
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="!size-[18px] lucide lucide-badge-info-icon lucide-badge-info"><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"/><line x1="12" x2="12" y1="16" y2="12"/><line x1="12" x2="12.01" y1="8" y2="8"/></svg> </StartContent>
                    <ChildContent>Ver detalles</ChildContent>
                </LumexDropdownItem>
                
                @if (!string.IsNullOrEmpty(context.User?.FindFirst("role")?.Value) && context.User?.FindFirst("role")?.Value == "Admin")
                {

                    <LumexDropdownItem Id="Divider2" Disabled="true">
                        <SidebarSectionDivider Name="Zona de peligro"/>
                    </LumexDropdownItem>
                    <LumexDropdownItem OnClick="SetDeleteBookConfirmationModal" Disabled="_deletingBook" Id="EliminarLibro" Color="@ThemeColor.Danger" Class="text-danger">
                        <StartContent>
                            <Trash2Icon Size="18" class="shrink-0"/>
                        </StartContent>
                        <ChildContent>Eliminar libro</ChildContent>
                    </LumexDropdownItem>
                }
               

                      

               
            </LumexDropdownMenu>
        </LumexDropdown>
           </Authorized>
       </AuthorizeView>
      
      
        @if (string.IsNullOrEmpty(Book.CoverUrl))
        {
            <div
                class="object-contain w-full h-full bg-neutral-950 ">

            </div>
        }
        else
        {
            <img src="@Book.CoverUrl"
                 class="object-contain w-full h-full brightness-75 "

                 alt="Card background"/>
        }

        <LumexCardFooter Blurred="@true" Class="absolute z-10 bottom-0 bg-orange-100/30">
            <div class="flex flex-col flex-grow gap-1 text-small   text-white">
                <p class="font-semibold line-clamp-1 ">@Book.Name</p>
                <p class="font-medium line-clamp-1 text-xs">


                    @if (Book.Authors.Any())
                    {
                        @(Book.Authors.First().Author.FullName)
                    }


                </p>
                @if (Book.Authors.Count() >= 2)
                {

                    <p class="font-medium line-clamp-1 text-xs">@($"{Book.Authors.Count() - 1} mas")</p>
                }

                @if (Book.AvailableAmount >= 1)
                {
                    <p class="text-green-500 text-xs ">@Book.AvailableAmount disponibles</p>
                }
                else
                {

                    <p class="text-red-500 text-xs">No disponibles</p>

                }

              
            </div>

        </LumexCardFooter>
    </LumexCard>
</Animate>

@if(ShowDeleteBookConfirmationDialog)
{
    <div @onclick="SetDeleteBookConfirmationModal" class="absolute inset-0 w-full h-full z-[9999999] bg-white/60 flex justify-center items-center">
        <div class="p-4 border-neutral-200 border flex w-[300px] flex-col gap-3 bg-white items-center rounded-lg">
            <label class="text-md font-semibold text-center">Desea eliminar el libro @Book.Name?</label>
            <p class="text-[13px] font-normal">Una vez eliminado el libro no se podr√° deshacer. No se puede eliminar un libro que tiene un prestamo pendiente.</p>
            <div class="w-full flex items-center justify-between gap-2">
                <LumexButton @onclick="SetDeleteBookConfirmationModal">Cancelar</LumexButton>
                <LumexButton  Disabled="@_deletingBook" Color="ThemeColor.Danger" Onclick="FetchDeleteBookAsync">
                    @if(_deletingBook)
                    {
                        <LumexSpinner Size="Size.Small"/>
                    }
                    else
                    {
                        @("Si, eliminar libro")
                    } 
                </LumexButton>

            </div>
        </div>
    </div>
}



@code{

 

    //flags

    public bool ShowDeleteBookConfirmationDialog {get; set;} = false;
    public bool _deletingBook {get; set;} = false;
    [Parameter] public BookResponse Book {get; set;} = new();

    [Parameter] public bool HideShowDetails {get; set;}
    
    [Parameter] public int Index {get; set;} = 1;

    [Parameter] public EventCallback OnBookDeleted {get; set;}


    public async Task FetchDeleteBookAsync()
    {
        if(Book.Id <= 0) return;

        _deletingBook = true;
        StateHasChanged();
        var result = await BooksApiServices.DeleteBookAsync(new(){BookId = Book.Id});

        if(result.IsSuccessful())
        {
            Toast.Show("Libro eliminado exitosamente.");
            await OnBookDeleted.InvokeAsync();
        }
        _deletingBook = false;
        ShowDeleteBookConfirmationDialog = false;
        StateHasChanged();
    }

    public void SetDeleteBookConfirmationModal()
    {
        if(_deletingBook) return;
        ShowDeleteBookConfirmationDialog = !ShowDeleteBookConfirmationDialog;
    }
    public void SetBookToUpdate()
    {
        RightBarContext.SetBookToUpdate(Book);
        RightBarContext.SetView(RightBarView.UpdateBook);
    }
    
    public void SetBookDetails()
    {
        RightBarContext.SetBookDetails(Book);
        RightBarContext.SetView(RightBarView.BookDetails);
    }

}