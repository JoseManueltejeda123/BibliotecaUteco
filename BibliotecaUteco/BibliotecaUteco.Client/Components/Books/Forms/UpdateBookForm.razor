@using BibliotecaUteco.Client.Utilities
<EditForm Model="UpdateBookModel" Enhance="true"   class="flex w-full absolute flex-col justify-center">
    <DataAnnotationsValidator/>
    
    
    <div class="relative w-full h-fit overflow-hidden">
        @if (!string.IsNullOrEmpty(_prevBookCover))
        {
            <img src="@_prevBookCover" class=" w-full h-[200px] object-cover  "/>

        }
        else
        {
            if (string.IsNullOrEmpty(BookCoverPrview) || UpdateBookModel.CoverFile is null)
            {
                <div class="bg-neutral-300 w-full h-[200px] object-cover "></div>
            }
            else
            {
                <img src="@BookCoverPrview" class=" w-full h-[200px] object-cover  "/>

            }
        }
        
        <div class="absolute bottom-0 left-0 w-full h-[40px] bg-gradient-to-b from-transparent via-white/70 to-white "></div>

    </div>
   
    
    
    @if (!string.IsNullOrEmpty(_prevBookCover))
    {
        <LumexButton Class="mx-3" Variant="Variant.Light" Type="ButtonType.Button" OnClick="RemovePrevCover" Size="Size.Small" Color="ThemeColor.Danger">Eliminar portada</LumexButton>

    }
    else{
            @if(UpdateBookModel.CoverFile is not null)
            {
                <LumexButton Class="mx-3" Variant="Variant.Light"  Type="ButtonType.Button" OnClick="RemoveCover" Size="Size.Small" Color="ThemeColor.Danger">Eliminar portada</LumexButton>
            }
            else
            {
        
                <LumexButton Class="absolute top-[100px] left-1/2 -translate-x-1/2 -translate-y-1/2" IconOnly="true" Color="ThemeColor.Primary" Variant="Variant.Light" Type="ButtonType.Button" OnClick="TriggerFileInput" >
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-image-plus-icon lucide-image-plus"><path d="M16 5h6"/><path d="M19 2v6"/><path d="M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5"/><path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/><circle cx="9" cy="9" r="2"/></svg>
                </LumexButton>
            
            }
    }
       
    <InputFile accept=".jpg,.jpeg,.png,.webp" @ref="fileInput"  class="hidden" OnChange="HandleFileChange" />
    
    <div class="flex flex-col gap-2 px-3">
        <div class="flex flex-col gap-3 w-full mt-2" >
            <LumexTextbox Type="@InputType.Text"
                          Behavior="InputBehavior.OnInput"
                          @bind-Value="@UpdateBookModel.BookName"
                          Label="Nombre del libro"
                          Placeholder="Ej. 100 años de soledad"
                          EndContent="@_titleIcon"
                          LabelPlacement="@LabelPlacement.Outside"
                          Required="true"
            />
            <span class="text-xs text-red-700"><ValidationMessage For="@(() => UpdateBookModel.BookName)"/></span>

        </div>
        <div class="flex flex-col gap-3 w-full">
            <label for="book synopsis" class="text-sm">Synopsis o descripción</label>
            <textarea
                class="bg-neutral-200/50 max-w-full rounded-lg p-2 text-sm outline-none resize-none  min-h-[6rem]"
                name="book synopsis"
                @bind="@UpdateBookModel.Synopsis"
                placeholder="Una breve descripcion de la historia o de que trata el libro"
                required="@true"
                maxlength="500"

                minlength="10"></textarea>
            <span class="text-xs text-red-700"><ValidationMessage For="@(() => UpdateBookModel.Synopsis)"/></span>

        </div>
        <div class="flex flex-col gap-3 w-full">
            <LumexNumbox TValue="@int"
                         Label="Copias"
                         @bind-Value="UpdateBookModel.Stock"
                         Behavior="InputBehavior.OnInput"
                         LabelPlacement="LabelPlacement.Outside"
                         Placeholder="Cantidad de copias"
                         Class="max-w-xs"
                         min="1"
                         max="@int.MaxValue"
                         step="1" />
            <span class="text-xs text-red-700"><ValidationMessage For="@(() => UpdateBookModel.Stock)"/></span>

        </div>
        <SidebarSectionDivider Name="Generos literarios"/>
        <div class="flex flex-col gap-3 w-full">
            <p class="text-xs">Máximo 5 generos y literarios minimo 1.</p>


            <div class="w-full gap-2 items-center flex flex-wrap">

                @if (UpdateBookModel.Genres.Count < 5)
                {
                <GenresDropdown OnGenreSelected="HandleOnGenreSelected">
                    <LumexChip Variant="ChipVariant.Outlined">Agregar Genero</LumexChip>
                </GenresDropdown>
                }
                @foreach (var genre in UpdateBookModel.Genres)
                {

                <LumexChip  OnClose="() => { RemoveGenre(genre);}">@genre.Name</LumexChip>
                }



            </div>



        </div>
        <SidebarSectionDivider Name="Autores"/>

        <div class="flex flex-col gap-3 w-full">
            <p class="text-xs">Máximo 10 autores.</p>

            <div class="w-full gap-2 items-center flex flex-wrap">
                @if (UpdateBookModel.Authors.Count < 10)
                {
                <AuthorsDropdown OnAuthorSelected="HandleOnAuthorSelected">
                    <button type="button"  class="hover:bg-green-50 cursor-pointer w-full rounded-lg border-dashed border-2 border-green-700 flex flex-col items-center justify-center gap-2 p-2">
                        <label class="text-sm text-green-700">Agregar Autor</label>
                    </button>
                </AuthorsDropdown>
                }
                @foreach (var author in UpdateBookModel.Authors)
                {

                <AuthorCard ShowRemoveButton="@true" OnRemove="RemoveAuthor" Author="@author" />
                }



            </div>



        </div>

        @if(_updatingBook)
        {
        <LumexSpinner Size="Size.Small" Variant="SpinnerVariant.Classic"/>
        }
        else
        {
            <LumexButton Class="w-full mt-[20px]" Onclick="FetchCreateBookAsync" Color="ThemeColor.Primary" Disabled="!context.Validate()">Guardar Cambios</LumexButton>

        }
    </div>
   


</EditForm>

    
        
       
          
                    
            
        
        





@code{


    public string _prevBookCover { get; set; } = "";
    public bool _updatingBook {get; set;} = false;
    public RenderFragment _titleIcon {get; set;} = @<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-neutral-300 lucide lucide-type-icon lucide-type"><path d="M12 4v16"/><path d="M4 7V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2"/><path d="M9 20h6"/></svg>;
    public UpdateBookRequest UpdateBookModel {get; set;} = new();


    [Required(ErrorMessage = "Debe seleccionar al menos un género literario.")]
    [MinLength(1, ErrorMessage = "Debe seleccionar al menos un género literario.")]

    public string CurrentFormSection {get; set;} = "name";

    public bool IsOpen {get; set;} = false;
    public string? BookCoverPrview { get; set; } = null;

   
    private InputFile fileInput;
    

}

@functions{
    
    protected override void OnInitialized()
    {
        if (RightBarContext.BookToUpdate is var book && book is not null)
        {
            UpdateBookModel.BookId = book.Id;
            UpdateBookModel.BookName = book.Name;
            UpdateBookModel.Authors = book.Authors.Select(x => x.Author).ToList();
            UpdateBookModel.Genres = book.Genres.Select(x => x.Genre).ToList();
            UpdateBookModel.Stock = book.Stock;
            UpdateBookModel.Synopsis = book.Synopsis;
            _prevBookCover = book.CoverUrl ?? "";
            
            StateHasChanged();

        }
    }

    public void HandleOnGenreSelected(GenreResponse genre){

        if(UpdateBookModel.Genres.Any(g => g.Id == genre.Id)){
            return;
        }
        UpdateBookModel.Genres.Insert(0, genre);
    }

    public void RemoveGenre(GenreResponse genre){
        var remove = UpdateBookModel.Genres.FirstOrDefault(g => g.Id == genre.Id);

        if(remove is not null)
        {
        UpdateBookModel.Genres.Remove(remove);
        }
    }

     public void HandleOnAuthorSelected(AuthorResponse author){

        if(UpdateBookModel.Authors.Any(a => a.Id == author.Id)){
            return;
        }
     UpdateBookModel.Authors.Insert(0, author);
    }

    public void RemoveAuthor(AuthorResponse author){
        var remove = UpdateBookModel.Authors.FirstOrDefault(g => g.Id == author.Id);

        if(remove is not null)
        {
            UpdateBookModel.Authors.Remove(remove);
        }
    }


    public async Task FetchCreateBookAsync()
    {

        _updatingBook = true;
        StateHasChanged();
       
        UpdateBookModel.RemoveCover = string.IsNullOrEmpty(_prevBookCover) && UpdateBookModel.CoverFile is null;
        var result = await BooksApiServices.UpdateBookAsync(UpdateBookModel);

        if (result.IsSuccessful())
        {   
            Toast.Success("Libro actualizado con exito");

            RightBarContext.SetUpdatedBook(result.Data);
            RightBarContext.SetView();
            Clear();
        }
        _updatingBook = false;
    
        StateHasChanged();

    }

    public void Clear()
    {
        UpdateBookModel = new();
       
        BookCoverPrview = null;
    }

    public async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var result = await FileHandler.HandleImageFromInputAsync(e);
        if (result.Item1 is null)
        {
            Toast.Error("Error al subir la imagen", new ToastModel()
            {
                Description = result.Item2
            });

            return;
        }

        UpdateBookModel.CoverFile = result.Item1;
        BookCoverPrview = result.Item2;

    }

    public void Dispose()
    {
        UpdateBookModel = new();
        BookCoverPrview = null;
    }

    public void RemovePrevCover()
    {
        _prevBookCover = "";
    }

    public void RemoveCover()
    {
        UpdateBookModel.CoverFile = null;
        BookCoverPrview = null;
    }
    
    private async Task TriggerFileInput()
    {
        await JsRuntime.InvokeVoidAsync("triggerClick", fileInput.Element);
    }

}

