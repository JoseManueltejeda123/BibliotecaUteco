<div class="flex flex-col p-2 gap-2 w-[300px] max-h-[500px] overflow-y-auto ">
    
    @if (ShowCreateAuthorModal)
    {
        <AuthorizeView Roles="Admin">
            <Authorized>
             <div class="w-full flex items-center justify-between mb-4">
                    <label class="text-lg font-semibold">Crear Autor</label>
                    <IconButton Small="true" OnClick="() => { ShowCreateAuthorModal = false; }" TooltipText="Cancelar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x-icon lucide-x"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
                    </IconButton>
                </div>
                <CreateAuthorForm OnAuthorCreated="HandleOnAuthorCreated"/>
            </Authorized>
        </AuthorizeView>
       
        
    }
    else if (ShowUpdateAuthorModal && SelectedAuthor is not null)
    {
        <AuthorizeView Roles="Admin">
            <Authorized>
                <div class="w-full flex items-center justify-between mb-4">
                    <label class="text-lg font-semibold">Actualizar Autor</label>
                    <IconButton Small="true" OnClick="() => { ShowUpdateAuthorModal = false; SelectedAuthor = null; }" TooltipText="Cancelar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x-icon lucide-x"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
                    </IconButton>
                </div>
                <UpdateAuthorForm OnAuthorUpdated="HandleOnAuthorUpdated" Author="SelectedAuthor"/>
            </Authorized>
        </AuthorizeView>
    }
    else
    {
        <div class="flex w-full gap-3 flex-col">
            <label class="text-[15px] font-semibold ">Administrar Autores</label>

        <EditForm class="w-full flex items-end gap-2" Model="@GetAuthorsByName" OnValidSubmit="FetchGetAuthorsByNameAsync">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <LumexTextbox Type="@InputType.Search"
                            Label="Buscar autor"
                            @bind-Value="@GetAuthorsByName.AuthorsName"
                            Placeholder="Ej. George R. R. Martin"
                            LabelPlacement="@LabelPlacement.Outside"
                            Disabled="@_fetchingAuthors"
                            Clearable="@true"
                            Size="Size.Small"
                            Behavior="InputBehavior.OnInput"
                            OnCleared="async()=>{await FetchGetAuthorsByNameAsync();}"
            />
            <LumexButton Size="Size.Small" Type="ButtonType.Submit" Disabled="@_fetchingAuthors" Color="ThemeColor.Primary" >
                Buscar
            </LumexButton>
        </EditForm>
        
    </div>
    <SidebarSectionDivider Name="Autores"/>

     <AuthorizeView Roles="Admin">
        <Authorized>
            <button @onclick="() => {ShowCreateAuthorModal = true; }" disabled="@_fetchingAuthors" class="w-full hover:bg-green-100/30 transition-all border-dotted border-[4px] border-green-600 rounded-lg flex px-3 py-1 items-center justify-center gap-3 cursor-pointer">
                <p class="text-sm text-green-600">Crear Autor</p>

            </button>
        </Authorized>
    </AuthorizeView>
   


    @if(_fetchingAuthors){

        <AuthorCardSkeleton Count="3"/>
    }
    else
    {
        if(Authors.Any())
        {
            foreach(var author in Authors)
            {
                <AuthorCard OnUpdate="HandleOnUpdateAuthor" OnClicked="HandleAuthorClicked" Author="author"/>
            }
        }
        else
        {   
            <NoResultsFound></NoResultsFound>
        }

       
    }
    }
    
    

</div>


@code{

    //flags

    public bool _fetchingAuthors {get; set;} = true;

    //props
    public List<AuthorResponse> Authors {get; set;} = new();
    public GetAuthorsByNameRequest GetAuthorsByName {get; set;} = new();

    public bool ShowCreateAuthorModal { get; set; } = false;
    public bool ShowUpdateAuthorModal {get; set;} = false;
    public AuthorResponse? SelectedAuthor { get; set; } = null;

    [Parameter]
    public EventCallback<AuthorResponse> OnAuthorClicked {get; set;}
    

    
}

@functions{

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await FetchGetAuthorsByNameAsync();

        }

    }

    public void HandleOnAuthorCreated(AuthorResponse author)
    {
        ShowCreateAuthorModal = false;
        Authors.Insert(0, author);
    }

    public async Task FetchGetAuthorsByNameAsync(){

        _fetchingAuthors = true;
        StateHasChanged();

        var result = await AuthorsApiServices.GetByNameAsync(GetAuthorsByName);

        if(result.IsSuccessful())
        {
            Authors = result.Data;
        }

        _fetchingAuthors = false;
        StateHasChanged();
    }

    public async Task HandleAuthorClicked(AuthorResponse author){

        await OnAuthorClicked.InvokeAsync(author);
    }

    public void HandleOnUpdateAuthor(AuthorResponse au)
    {
        SelectedAuthor = au;
        ShowUpdateAuthorModal = true;
    }

    public void HandleOnAuthorUpdated(AuthorResponse au)
    {
        var author = Authors.FirstOrDefault(a => a.Id == au.Id);

        if (author is null) return;

        var index = Authors.IndexOf(author);

        if (index < 0) return;

        Authors[index] = au;
    }
    

   
}