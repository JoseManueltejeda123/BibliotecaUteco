@using BibliotecaUteco.Client.Utilities
<div  class="w-full  justify-between hover:bg-neutral-100 cursor-pointer transition-all rounded-lg flex px-3 py-2 items-center  gap-3">
    <div class="flex items-center gap-2">
        <LumexAvatar Class="!shrink-0" Size="Size.Small" Color="RandomColor" Src=@($"https://www.tapback.co/api/avatar/{Author.FullName}.webp") Name="@Author.FullName"/>
        <div class="flex flex-col">
            <p class="text-sm font-semibold line-clamp-1 text-ellipsis overflow-hidden">@Author.FullName</p>
        
            @if(ShowBooksCount)
            {
                <label class="opacity-80 text-xs line-clamp-1 text-ellipsis overflow-hidden">@Author.BooksCount libros registrados</label>

            }
        </div>
    </div>
   
        

   
            <AuthorizeView>
                <Authorized>
                      <LumexDropdown ShowArrow="true"  Id=@($"AuthorsActions-{Author.FullName}")>
                        <LumexDropdownTrigger>
                                    <EllipsisVerticalIcon Size="18px"/>
                        </LumexDropdownTrigger>
                        <LumexDropdownMenu>
                            <LumexDropdownItem OnClick="TriggerOnClicked" Id="Select">
                                <StartContent>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mouse-pointer-click-icon lucide-mouse-pointer-click"><path d="M14 4.1 12 6"/><path d="m5.1 8-2.9-.8"/><path d="m6 12-1.9 2"/><path d="M7.2 2.2 8 5.1"/><path d="M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z"/></svg>                    </StartContent>
                                <ChildContent>
                                    <p class="text-[13px] font-normal">Seleccionar Autor</p>
                                </ChildContent> 
                            </LumexDropdownItem>
                            <LumexDropdownItem Disabled='@(!context.User.IsInRole("Admin"))' OnClick="TriggerOnUpdate" Id="Edit">
                                <StartContent>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil-ruler-icon lucide-pencil-ruler"><path d="M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13"/><path d="m8 6 2-2"/><path d="m18 16 2-2"/><path d="m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17"/><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"/><path d="m15 5 4 4"/></svg>
                                </StartContent>
                                <ChildContent>
                                    <p class="text-[13px] font-normal">Editar Autor</p>
                                </ChildContent> 
                            </LumexDropdownItem>
                            <LumexDropdownItem Disabled='@(!context.User.IsInRole("Admin"))'  OnClick="ShowDeleteAuthorDialog" Id="Delete" Color="@ThemeColor.Danger" Class="text-danger">
                                 <StartContent>
                                     <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash2-icon lucide-trash-2"><path d="M10 11v6"/><path d="M14 11v6"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M3 6h18"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>                    </StartContent>
                                <ChildContent>
                                    <p class="text-[13px] font-normal">Eliminar Autor</p>
                                </ChildContent> 
                            </LumexDropdownItem>
                        </LumexDropdownMenu>
                    </LumexDropdown>
                </Authorized>
            </AuthorizeView>
            
         
        
   

</div>

    
@if (_deletingAuthor)
{
    <div class="absolute z-[999] w-full h-full bg-white/10  flex flex-col gap-1 inset-0 items-center justify-center">
        <LumexSpinner Size="Size.Small" Variant="SpinnerVariant.Classic"/>
        <p>Eliminando Autor</p>
    </div>
}

@code{

    public bool _deletingAuthor { get; set; } = false;
    [Parameter] public AuthorResponse Author { get; set; } = new();
    
    [Parameter] public EventCallback<AuthorResponse> OnClicked {get; set;}
    [Parameter] public EventCallback<AuthorResponse> OnUpdate {get; set;}
    [Parameter] public EventCallback<AuthorResponse> OnDeleted {get; set;}

    [Parameter] public bool ShowBooksCount {get; set;} = true;

    [Parameter] public bool ShowRemoveButton {get; set;} = false;

    public ThemeColor RandomColor { get; set; } = ThemeColor.Default;

}

@functions{

    public async Task ShowDeleteAuthorDialog()
    {
        if (_deletingAuthor) return;
        await HideDropdown();
        var confirmed = await DialogService.ShowAsync(
            title: "Eliminar Autor",
            body: $"¿Desea eliminar el autor {Author.FullName}? Una vez eliminado no se podrá recuperar.",
            acceptText: "Sí, eliminar autor",
            cancelText: "Cancelar"
            
        );

        if (confirmed)
        {
            await FecthDeleteAuthorAsync();
        }
    }
    public async Task HideDropdown()
    {
        await Task.Delay(20);
        await JsRuntime.InvokeVoidAsync("removeDropdownOverlay", $"AuthorsActions-{Author.FullName}");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RandomColor = RandomColorHelper.GetRandomColor();
            StateHasChanged();
        }
    }

    public async Task TriggerOnUpdate()
    {
        await OnUpdate.InvokeAsync(Author);
        await HideDropdown();
    }
    public async Task TriggerOnClicked(){

        await OnClicked.InvokeAsync(Author);
        await HideDropdown();
    }

    public async Task TriggerOnDelete()
    {
        await OnDeleted.InvokeAsync(Author);
    }

    public async Task FecthDeleteAuthorAsync()
    {
        _deletingAuthor = true;
        StateHasChanged();
        var result = await AuthorsApiServices.DeleteAsync(new() { AuthorId = Author.Id });

        if (result.IsSuccessful())
        {
            Toast.Show("Autor eliminado exitosamente");
            await TriggerOnDelete();
        }

        _deletingAuthor = false;
        StateHasChanged();
    }
    
   


    
}