@using BibliotecaUteco.Client.Utilities
<div @onclick="TriggerOnClicked" class="w-full justify-between hover:bg-neutral-100 cursor-pointer transition-all rounded-lg flex px-3 py-2 items-center  gap-3">
    <div class="flex items-center gap-2">
        <LumexAvatar Class="!shrink-0" Size="Size.Small" Color="RandomColor" Src=@($"https://www.tapback.co/api/avatar/{Author.FullName}.webp") Name="@Author.FullName"/>
        <div class="flex flex-col">
            <p class="text-sm font-semibold line-clamp-1 text-ellipsis overflow-hidden">@Author.FullName</p>
        
            @if(ShowBooksCount)
            {
                <label class="opacity-80 text-xs line-clamp-1 text-ellipsis overflow-hidden">@Author.BooksCount libros registrados</label>

            }
        </div>
    </div>
   
    <div class=" flex items-center gap-2">
        @if(!ShowRemoveButton)
        {

            <AuthorizeView Roles="Admin">
                <Authorized>
                    <IconButton TooltipText="Opciones de autor" Class="mr-auto"  Small="@true">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-ellipsis-icon lucide-circle-ellipsis"><circle cx="12" cy="12" r="10"/><path d="M17 12h.01"/><path d="M12 12h.01"/><path d="M7 12h.01"/></svg>
                    </IconButton>
    
                </Authorized>
            </AuthorizeView>
        }
    

        @if (ShowRemoveButton)
        {
            <IconButton  OnClick="TriggerOnRemove" TooltipText="Remover Autor" Class="ml-auto hover:text-red-600"  Small="@true">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-minus-icon lucide-minus"><path d="M5 12h14"/></svg>        
            </IconButton>
        }
    </div>
   

</div>

@code{

    [Parameter] public AuthorResponse Author { get; set; } = new();
    [Parameter] public EventCallback<AuthorResponse> OnClicked {get; set;}
    [Parameter] public EventCallback<AuthorResponse> OnRemove {get; set;}
    [Parameter] public bool ShowBooksCount {get; set;} = true;

    [Parameter] public bool ShowRemoveButton {get; set;} = false;

    public ThemeColor RandomColor { get; set; } = ThemeColor.Default;

}

@functions{

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RandomColor = RandomColorHelper.GetRandomColor();
            StateHasChanged();
        }
    }

    public async Task TriggerOnClicked(){

        await OnClicked.InvokeAsync(Author);
    }
    
    public async Task TriggerOnRemove(){

        await OnRemove.InvokeAsync(Author);
    }


    
}