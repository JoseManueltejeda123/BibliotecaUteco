@page "/"
@using BibliotecaUteco.Client.Requests.Users.Actions
@using LumexUI.Common
@layout DefaultLayout
<PageTitle>Index</PageTitle>
<section class="w-full h-full flex max-md:flex-col  justify-center items-center  relative ">
    <div class=" inset-0 z-0 w-[60%] max-md:w-full h-full opacity-40 bg-neutral-200"
         style="background-size: 40px 40px;  background-image: repeating-linear-gradient(45deg, rgba(0, 0, 0, 0.1) 0, rgba(0, 0, 0, 0.1) 1px, transparent 1px, transparent 20px),  repeating-linear-gradient(-45deg, rgba(0, 0, 0, 0.1) 0, rgba(0, 0, 0, 0.1) 1px, transparent 1px, transparent 20px);">
    </div>
   
    <div class="flex flex-col h-full justify-center items-center z-10 w-[40%] p-[30px]  max-md:w-full border-l border-neutral-200 rounede-l-lg">
        <h2 class="font-semibold text-sm text-black">U T E C O</h2>
        <h2 class="font-semibold text-[50px] text-black">Biblioteca</h2>
        
        <p class="text-xs mb-[25px]">Inicia sesión con tus credenciales</p>

        <EditForm  Model=@AuthenticateUserRequest class="w-[75%] flex flex-col gap-5" OnValidSubmit="@FetchLoginAsync">
            <DataAnnotationsValidator/>
    
            <div class="flex flex-col gap-3">
                <LumexTextbox Type="@InputType.Text"
                              @bind-Value="@AuthenticateUserRequest.Username"
                              Label="Tu nombre de usuario"
                              Placeholder="Ej. juan.123"
                              LabelPlacement="@LabelPlacement.Outside"
                              EndContent="@_userIcon"
                              Required="true"
                              Disabled="_logingIn"
                              Description="Mayor que 5 caracteres y menor de 15."/>
                <span class="text-xs text-red-700"><ValidationMessage For="@(() => AuthenticateUserRequest.Username)"/></span>

            </div>
           
            <div class="flex flex-col gap-3">
                <LumexTextbox Type="(ShowPassword ? InputType.Text : InputType.Password)"
                              Behavior="InputBehavior.OnInput"
                              @bind-Value="@AuthenticateUserRequest.Password"
                              Label="Tu contraseña"
                              Required="true"
                              Placeholder="********"
                              Disabled="_logingIn"
                              LabelPlacement="@LabelPlacement.Outside"
                              EndContent="@(ShowPassword ? _eyeOpenIcon : _eyeClosedIcon)"
                              Description="Min. 8 caracteres max. 30"/>
                <a class="text-xs underline hover:text-blue-600" @onclick="SwitchPasswordVisibility">Cambiar visibilidad</a>
                <span class="text-xs text-red-700"><ValidationMessage For="@(() => AuthenticateUserRequest.Password)"/></span>
            </div>
            
            <LumexCheckbox  Disabled="_logingIn" Size="Size.Small" @bind-Value="@RemindMe">Recuerda mis credenciales</LumexCheckbox>

         
            @if (_logingIn)
            {
                <LumexSpinner Size="Size.Small" Variant="SpinnerVariant.Classic"></LumexSpinner>
            }
            else
            {
                <LumexButton  Variant="Variant.Solid" Type="ButtonType.Submit" Class="mt-3" Disabled="@(!context.Validate() || _logingIn)" Color="ThemeColor.Primary">Iniciar Sesión</LumexButton>

            }
        </EditForm>
    </div>
</section>


@code{

    //flags
    public bool _logingIn { get; set; } = false;
    
    
    //props
    
    public AuthenticateUserRequest AuthenticateUserRequest { get; set; } = new();
    
    private RenderFragment _userIcon = @<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="stroke-neutral-300 lucide lucide-at-sign-icon lucide-at-sign"><circle cx="12" cy="12" r="4"/><path d="M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8"/></svg>;

    private RenderFragment _passwordIcon = @<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"  stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="stroke-neutral-300  lucide-fingerprint-icon lucide-fingerprint"><path d="M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4"/><path d="M14 13.12c0 2.38 0 6.38-1 8.88"/><path d="M17.29 21.02c.12-.6.43-2.3.5-3.02"/><path d="M2 12a10 10 0 0 1 18-6"/><path d="M2 16h.01"/><path d="M21.8 16c.2-2 .131-5.354 0-6"/><path d="M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2"/><path d="M8.65 22c.21-.66.45-1.32.57-2"/><path d="M9 6.8a6 6 0 0 1 9 5.2v2"/></svg>;  
    private RenderFragment _eyeOpenIcon = @<svg  xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye-icon lucide-eye"><path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"/><circle cx="12" cy="12" r="3"/></svg>;
    private RenderFragment _eyeClosedIcon = @<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye-closed-icon lucide-eye-closed"><path d="m15 18-.722-3.25"/><path d="M2 8a10.645 10.645 0 0 0 20 0"/><path d="m20 15-1.726-2.05"/><path d="m4 15 1.726-2.05"/><path d="m9 18 .722-3.25"/></svg>;
    private bool RemindMe { get; set; } = false;
    public bool ShowPassword { get; set; } = false;






}

@functions{

    public async Task FetchLoginAsync()
    {
        _logingIn = true;
        var result = await UsersApiServices.LoginUserAsync(AuthenticateUserRequest);
        if (result.IsSuccess && result.Data is not null)
        {
            await AuthStateProvider.UpdateAuthenticationStateAsync(result.Data.Token, RemindMe);
            NavManager.NavigateTo("/home");
            
        }
        _logingIn = false;
    }

    public void SwitchPasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }
}

