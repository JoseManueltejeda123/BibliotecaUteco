@page "/"
@using BibliotecaUteco.Client.Requests.Users.Actions
@using LumexUI.Common
@layout DefaultLayout

<PageTitle>Index</PageTitle>
<section class="w-full h-full flex flex-col gap-3 justify-center items-center  relative ">
    <div class="absolute inset-0 z-0 opacity-30"
         style="background-image: 
        linear-gradient(45deg, transparent 49%, #E5EBE6FF 49%, #E5EBE6FF 51%, transparent 51%), 
        linear-gradient(-45deg, transparent 49%, #e5ebe5 49%, #e5e7eb 51%, transparent 51%);
        background-size: 40px 40px;">
    </div>
    <div class="flex flex-col justify-center items-center z-10 w-[30%] max-md:w-[80%]  gap-5">
        <h2 class="text-3xl font-semibold">Bienvenido</h2>
        <EditForm  Model=@AuthenticateUserRequest class="w-full flex flex-col gap-3" OnValidSubmit="@FetchLoginAsync">
            <DataAnnotationsValidator />

            <LumexTextbox Type="@InputType.Text"
                          Behavior="InputBehavior.OnInput"

                          @bind-Value="@AuthenticateUserRequest.Username"
                          Label="Tu nombre de usuario"
                          Placeholder="Ej. juan.123"
                          LabelPlacement="@LabelPlacement.Outside"
                          EndContent="@_userIcon"
                          Description="Mayor que 5 caracteres y menor de 15."
                          
            />
            <span class="text-xs text-red-600"><ValidationMessage For="@(() => AuthenticateUserRequest.Username)" /></span>
            
            <LumexTextbox Type="@InputType.Password"
                          Behavior="InputBehavior.OnInput"
                          @bind-Value="@AuthenticateUserRequest.Password"
                          Label="Tu contraseña"
                          Placeholder="********"
                          LabelPlacement="@LabelPlacement.Outside"
                          EndContent="@_passwordIcon"
                          Description="Min. 8 caracteres max. 30"
                          
            />
            <span class="text-xs text-red-600"><ValidationMessage For="@(() => AuthenticateUserRequest.Password)" /></span>
            <LumexButton Type="ButtonType.Submit" Class="mt-3" Disabled="@(!context.Validate() || _logingIn)" Color="ThemeColor.Primary">
                
                @if (_logingIn)
                {
                        <LumexSpinner Size="Size.Small" Variant="SpinnerVariant.Classic"></LumexSpinner>
                }
                else
                {
                    @("Iniciar Sesión")
                }
            </LumexButton>
        </EditForm>
    </div>
</section>


@code{

    //flags
    public bool _logingIn { get; set; } = false;
    
    public AuthenticateUserRequest AuthenticateUserRequest { get; set; } = new();
    
    private RenderFragment _userIcon = @<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-at-sign-icon lucide-at-sign"><circle cx="12" cy="12" r="4"/><path d="M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8"/></svg>;

    private RenderFragment _passwordIcon = @<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-fingerprint-icon lucide-fingerprint"><path d="M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4"/><path d="M14 13.12c0 2.38 0 6.38-1 8.88"/><path d="M17.29 21.02c.12-.6.43-2.3.5-3.02"/><path d="M2 12a10 10 0 0 1 18-6"/><path d="M2 16h.01"/><path d="M21.8 16c.2-2 .131-5.354 0-6"/><path d="M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2"/><path d="M8.65 22c.21-.66.45-1.32.57-2"/><path d="M9 6.8a6 6 0 0 1 9 5.2v2"/></svg>;
    


}

@functions{

    public async Task FetchLoginAsync()
    {
        _logingIn = true;
        var result = await UsersApiServices.LoginUserAsync(AuthenticateUserRequest);
        if (result.IsSuccess && result.Data is not null)
        {
            await AuthStateProvider.UpdateAuthenticationStateAsync(result.Data.Token);
            NavManager.NavigateTo("/home");
            
        }
        _logingIn = false;
    }
}

